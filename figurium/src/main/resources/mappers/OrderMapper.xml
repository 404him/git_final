<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.githrd.figurium.order.dao.OrderMapper">

    <insert id="insertOrders" parameterType="Map">
        insert into orders(id, user_id, payment_type, price, status, created_at, valid, merchant_id)
        values(
                null,
                #{ userId },
                #{ paymentType },
                #{ price },
                '준비중',
                CURRENT_TIMESTAMP,
                'y',
                #{ merchantUid }
                )
    </insert>

    <select id="selectOneLast" resultType="orders">
        select * from orders order by id desc limit 1;
    </select>

<!--    <select id="selectListByUserId" resultType="myOrders" parameterType="int">-->
<!--        SELECT-->
<!--            o.id AS order_id,-->
<!--            o.user_id,-->
<!--            o.payment_type,-->
<!--            o.price,-->
<!--            o.status,-->
<!--            o.created_at,-->
<!--            p.name AS product_name,-->
<!--            p.image_url,-->
<!--            (SELECT COUNT(*) - 1-->
<!--             FROM order_items oi2-->
<!--             WHERE oi2.order_id = o.id) AS remain_count-->
<!--        FROM orders o-->
<!--                 JOIN order_items oi ON o.id = oi.order_id-->
<!--                 JOIN products p ON oi.product_id = p.id-->
<!--        where o.user_id = #{userId}-->
<!--        ORDER BY oi.id DESC-->
<!--        LIMIT 1-->
<!--    </select>-->

    <select id="selectListByUserId" resultType="myOrders" parameterType="int">
        select
            id,
            max(payment_type) as payment_type,
            max(name) as name,
            sum(price) as price,
            date_format(max(created_at), '%Y/%m/%d') as created_at,
            max(product_name) as product_name,
            count(distinct product_name) - 1 as product_count,
            min(image_url) as image_url,
            max(status) as status,
            sum(price * quantity) as total_value  -- 각 행의 price * quantity의 총합
        from order_history_view
        where user_id = #{ user_id }
        group by id;
    </select>

    <select id="selectListByDetailOrder" resultType="myOrders" parameterType="int">
        select
            oh.*,
            (select sum(price * quantity)
             from order_history_view
             where id = #{ myOrderId } and user_id = #{ userId }) as total_value
        from order_history_view oh
        where id = #{ myOrderId } and user_id = #{ userId }
    </select>

    <select id="selectOneOrderInfo" resultType="myOrders" parameterType="int">
        select
            oh.*,
            (select sum(price * quantity)
             from order_history_view
             where id = #{ myOrderId } and user_id = #{ userId }) as total_value
        from order_history_view oh
        where id = #{ myOrderId } and user_id = #{ userId } limit 1
    </select>
    
    <select id="viewAllList" resultType="myOrders" >
        -- select * from order_history_view
        select
            id,
            max(payment_type) as payment_type,
            max(name) as name,
            max(status) as status,
            max(valid) as valid,
            sum(price) as price,
            date_format(max(created_at), '%Y/%m/%d') as created_at,
            max(product_name) as product_name,
            count(distinct product_name) - 1 as product_count,
            min(image_url) as image_url,
            sum(price * quantity) as total_value  -- 각 행의 price * quantity의 총합
        from order_history_view
        group by id;
    </select>

    <select id="selectOneByMerchantUid" resultType="myOrders" parameterType="int">
        select
            id,
            max(payment_type) as payment_type,
            max(name) as name,
            max(valid) as valid,
            sum(price) as price,
            date_format(max(created_at), '%Y/%m/%d') as created_at,
            max(product_name) as product_name,
            count(distinct product_name) - 1 as product_count,
            min(image_url) as image_url,
            max(merchant_id) as merchant_id,
            sum(price * quantity) as total_value  -- 각 행의 price * quantity의 총합
        from order_history_view
        where id = #{ id }
        group by id;
    </select>

    <update id="updateOrderStatus" parameterType="myOrders">
        UPDATE orders
        SET status = #{status}
        WHERE id = #{id}
    </update>

    <select id="selectOneById" resultType="myOrders">
        select * from orders where id = #{id}
    </select>



</mapper>












