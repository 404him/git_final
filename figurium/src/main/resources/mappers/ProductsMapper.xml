<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.githrd.figurium.product.dao.ProductsMapper">

    <select id="selectOneGetName" resultType="products" parameterType="int">
        select * from products where id = #{ productId }
    </select>

    <select id="selectOneCheckProduct" resultType="products" parameterType="int">
        select * from products where id = #{ productId }
    </select>

    <update id="updateProductQuantity" parameterType="int">
        update products
        set quantity = quantity - #{ itemQuantity }
            where id = #{ productId }
    </update>




    <insert id="productInsert" parameterType="products">
        INSERT INTO products (category_name, name, price, quantity, image_url)
        VALUES (#{categoryName}, #{name}, #{price}, #{quantity}, #{imageUrl})
    </insert>

    <update id="productUpdate" parameterType="products">
        UPDATE products
        SET category_name = #{categoryName},
            name = #{name},
            price = #{price},
            quantity = #{quantity},
            image_url = #{imageUrl}
        WHERE id = #{id}
    </update>

    <!-- 상품의 카테고리별 조회 및 필터링 동적 쿼리문 -->
    <select id="categoriesList" resultType="products" parameterType="Map">
        <!-- 서브쿼리를 사용하여 상품 정보와 좋아요 수를 집계 -->
        SELECT p.*, COALESCE(likeCount, 0) AS likeCount
        FROM (
        <!-- 서브쿼리 시작 -->
        SELECT p.id, p.category_name, p.name, p.price, p.created_at, p.image_url,
        COALESCE(SUM(pl.product_count), 0) AS likeCount
        FROM products p
        LEFT JOIN product_likes pl ON p.id = pl.product_id
        <where>
            <!-- 카테고리 필터링: categoryName이 null이 아니고 빈 문자열이 아닐 때 필터 적용 -->
            <if test="categoryName != null and categoryName != ''">
                p.category_name = #{categoryName}
            </if>
        </where>
        <!-- 상품 정보를 기준으로 그룹화하여 좋아요 수 집계 -->
        GROUP BY p.id, p.category_name, p.name, p.price, p.created_at, p.image_url
        ) AS p
        <choose>
            <!-- 필터에 따라 정렬 방식 결정 -->
            <when test="selectFilter == 'default'">
                <!-- 기본 정렬: 상품 ID 기준 내림차순 -->
                ORDER BY p.id DESC
            </when>
            <when test="selectFilter == 'newProducts'">
                <!-- 최신 상품 우선 정렬: 생성일 기준 내림차순 -->
                ORDER BY p.created_at DESC
            </when>
            <when test="selectFilter == 'bestProducts'">
                <!-- 좋아요 수 기준 정렬: 좋아요 수 기준 내림차순 -->
                ORDER BY p.likeCount DESC
            </when>
            <when test="selectFilter == 'highPrice'">
                <!-- 가격 기준 정렬: 높은 가격부터 오름차순 -->
                ORDER BY p.price DESC
            </when>
            <when test="selectFilter == 'lowPrice'">
                <!-- 가격 기준 정렬: 낮은 가격부터 오름차순 -->
                ORDER BY p.price ASC
            </when>
            <otherwise>
                <!-- 기본 정렬: 상품 ID 기준 내림차순 -->
                ORDER BY p.id DESC
            </otherwise>
        </choose>
    </select>








</mapper>












